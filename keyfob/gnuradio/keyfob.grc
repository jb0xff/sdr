options:
  parameters:
    author: ''
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: lesson1
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: Not titled yet
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: center_freq
  id: variable
  parameters:
    comment: ''
    value: 433.92e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [296, 52.0]
    rotation: 0
    state: true
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: 2.4e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [200, 52.0]
    rotation: 0
    state: true
- name: analog_quadrature_demod_cf_0
  id: analog_quadrature_demod_cf
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    gain: '1'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [368, 356.0]
    rotation: 0
    state: true
- name: blocks_complex_to_mag_0
  id: blocks_complex_to_mag
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [368, 256.0]
    rotation: 0
    state: true
- name: blocks_file_sink_0
  id: blocks_file_sink
  parameters:
    affinity: ''
    alias: ''
    append: 'False'
    comment: ''
    file: /home/star/Documents/gnuradio-files/mitsubishi_keyfob_gnu_file
    type: float
    unbuffered: 'False'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1344, 188.0]
    rotation: 0
    state: disabled
- name: blocks_file_source_0
  id: blocks_file_source
  parameters:
    affinity: ''
    alias: ''
    begin_tag: pmt.PMT_NIL
    comment: ''
    file: /home/star/Documents/gnuradio-files/mitsubishi_keyfob_gnu_file
    length: '0'
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    repeat: 'True'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [136, 460.0]
    rotation: 0
    state: disabled
- name: blocks_multiply_xx_0
  id: blocks_multiply_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1152, 192.0]
    rotation: 0
    state: true
- name: blocks_threshold_ff_0
  id: blocks_threshold_ff
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    high: '.1'
    init: '0'
    low: '.05'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [864, 172.0]
    rotation: 0
    state: true
- name: blocks_threshold_ff_0_0
  id: blocks_threshold_ff
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    high: '.1'
    init: '0'
    low: -.15
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [848, 404.0]
    rotation: 0
    state: true
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport pickle\nimport datetime\n\n\ndef bitstring_to_bytes(s):\n\
      \    v = int(s, 2)\n    b = bytearray()\n    while v:\n        b.append(v &\
      \ 0xff)\n        v >>= 8\n    return bytes(b[::-1])\n\n\nclass blk(gr.sync_block):\
      \  # other base classes are basic_block, decim_block, interp_block\n    \"\"\
      \"Embedded Python Block example - a simple multiply const\"\"\"\n\n    def __init__(self,\
      \ preamble_bits=1, edge_offset=1):  # only default arguments here\n        \"\
      \"\"arguments to this function show up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n\
      \            self,\n            name='KeyFob Decoder',   # will show up in GRC\n\
      \            in_sig=[np.float32, np.float32],\n            out_sig=None\n  \
      \      )\n        # if an attribute with the same name as a parameter is found,\n\
      \        # a callback is registered (properties work, too).\n        self.preamble_bits\
      \ = preamble_bits\n        self.edge_offset = edge_offset\n        self.total_data_points\
      \ = 0\n        self.data_points_threshold = []\n        self.data_points_signal\
      \ = np.array([])\n        self.state = 1\n        self.frame_start = None\n\
      \        self.frame_stop = None\n        self.keys = [\n                \"000000000000000001110000000000000000000000000000000011101111\"\
      ,\n                \"000000000000000000010000000000000000000000000000000010100010\"\
      ,\n                \"000000000000000000110000000000000000000000000000000010011001\"\
      ,\n                \"000000000000000000010000000000000000000000000000000010100010\"\
      ,\n                \"000000000000000011110000000000000000000000000000000000000011\"\
      ,\n                \"000000000000000000010000000000000000000000000000000010100010\"\
      ,\n                \"000000000000000000110000000000000000000000000000000010011001\"\
      ,\n                \"000000000000000000010000000000000000000000000000000010100010\"\
      ,\n                    ]\n\n    def work(self, input_items, output_items):\n\
      \        input_threshold = np.array(input_items[0])\n        input_signal =\
      \ np.array(input_items[1])\n        if np.any(input_threshold > 0.5):\n    \
      \        print(len(input_signal))\n            # self.total_data_points += len(input_signal)\n\
      \            # # print(f\"input signal len({len(input_signal)}), total {self.total_data_points})\"\
      )\n            # if self.state == 1:\n            #     leading_edge = (input_threshold[:-1]\
      \ - input_threshold[1:]) < -0.5\n            #     if len(np.where(leading_edge))\
      \ > 1:\n            #         print(f\"multi leading edge {len(leading_edge)}\"\
      )\n            #     if np.any(leading_edge == True):\n            #       \
      \  #Find the first place that a negative is located.\n            #        \
      \ location = np.where(leading_edge)[0][0]\n            #         #Store the\
      \ start location.\n            #         self.frame_start = location + 0 #delay\
      \ start to eliminate leading jitter.\n            #         #When edge is found\
      \ start looking for the trailing edge\n            #         self.state = 2\n\
      \            #         #Store the data because it will span several frames.\n\
      \            #         self.data_points_signal = np.append(self.data_points_signal,\
      \ input_signal)\n            #\n            # if self.state == 2:\n        \
      \    #     self.data_points_signal = np.append(self.data_points_signal, input_signal)\n\
      \            #     # Calculate sample 1 minus sample 2. If edge goes negative\
      \ then the answer is positive.\n            #     trailing_edge = (input_threshold[:-1]\
      \ - input_threshold[1:]) > 0.5\n            #     if len(np.where(trailing_edge))\
      \ > 1:\n            #         print(\"multi trailing edge {len(trailing_edge)}\"\
      )\n            #     # self.total_data_points += len(input_threshold)\n    \
      \        #     # self.data_points_threshold.append(input_threshold)\n      \
      \      #     # if self.total_data_points > 700000: # depends on the sample rate\
      \ in gnuradio\n            #     #     print(f\"Threshold!, points collected:\
      \ {self.total_data_points}\")\n            #     #     self.total_data_points\
      \ = 0\n            #     #     for data_point in self.data_points_threshold:\n\
      \            #     #         if np.any(data_point > 0.5):\n            #   \
      \  #             if np.any((data_point[:-1] - data_point[1:]) < -0.5):\n   \
      \         #     #                 leading_edge = (data_point[:-1] - data_point[1:])\
      \ < -0.5\n            #     #                 location = np.where(leading_edge)[0][0]\n\
      \            #     #                 print(f\"leading edge at:{index},{int(location\
      \ + 1)}\")\n            #         # with open(f'{datetime.datetime.now().strftime(\"\
      %Y%m%d_%H%m%S\")}_data_points.pkl', 'ab') as file:\n            #         #\
      \     pickle.dump(self.data_points_threshold, file, pickle.HIGHEST_PROTOCOL)\n\
      \            #         # self.data_points_threshold = []\n            #\n  \
      \          #     # Check if any go positive.\n            #     if np.any(trailing_edge\
      \ == True):\n            #         # Find the first place a positive is located.\n\
      \            #         location = np.where(trailing_edge)[0][0]\n          \
      \  #         # Store the relative stop location as it is in the whole data set\
      \ not just the current frame.\n            #         self.frame_stop = (len(self.data_points_signal)\
      \ - int(len(input_signal))) + location\n            #         # debug\n    \
      \        #         # print 'trailing edge location ', stop\n            #  \
      \       # print 'stop minus start', (stop - start)\n            #         self.state\
      \ = 3\n            #\n            # if self.state == 3:\n            #     positive_edges\
      \ = []\n            #     negative_edges = []\n            #     state = 0\n\
      \            #     data = self.data_points_signal\n            #     for index,\
      \ d in enumerate(data):\n            #         if state == 0 and d == 1:\n \
      \           #             positive_edges.append(index)\n            #      \
      \       state = 1\n            #         if state == 1 and d == 0:\n       \
      \     #             negative_edges.append(index)\n            #            \
      \ state = 0\n            #     durations = []\n            #     for index,\
      \ edge in enumerate(positive_edges):\n            #         diff = negative_edges[index]\
      \ - edge\n            #         durations.append(diff)\n            #     signal1\
      \ = []\n            #     signal_started = False\n            #     signal_end\
      \ = None\n            #     for index, d in enumerate(durations):\n        \
      \    #         if d > 1000 or signal_started:\n            #             signal_started\
      \ = True\n            #             if 1000 < d < 1500:\n            #     \
      \            signal1.append(1)\n            #             if d < 1000:\n   \
      \         #                 signal1.append(0)\n            #             if\
      \ d > 1500:\n            #                 signal_end = index + 1  # save where\
      \ signal has ended in the data\n            #                 signal_started\
      \ = False\n            #                 break\n            #     signal2 =\
      \ []\n            #     for index, d in enumerate(durations[signal_end:]):\n\
      \            #         if d > 1000 or signal_started:\n            #       \
      \      signal_started = True\n            #             if 1000 < d < 1500:\n\
      \            #                 signal2.append(1)\n            #            \
      \ if d < 1000:\n            #                 signal2.append(0)\n          \
      \  #             if d > 1500:\n            #                 break\n       \
      \     #     print(f\"Singal_1: {bitstring_to_bytes(''.join(str(d) for d in signal1))},\
      \ bitstream {''.join(str(d) for d in signal1)}\")\n            #     # print(f\"\
      Singal_2: {bitstring_to_bytes(''.join(str(d) for d in signal2))}, bitstream\
      \ {''.join(str(d) for d in signal2)}\")\n            #     signal = ''.join(str(d)\
      \ for d in signal1)\n            #     for key in self.keys:\n            #\
      \         next_signal = []\n            #         for index,s in enumerate(signal):\n\
      \            #             next_signal.append(int(s) ^ int(key[index]))\n  \
      \          #         print(''.join(str(d) for d in next_signal))\n         \
      \   #     self.total_data_points = 0\n            #     self.data_points_threshold\
      \ = []\n            #     self.data_points_signal = np.array([])\n         \
      \   #     self.state = 1\n            #     self.frame_start = None\n      \
      \      #     self.frame_stop = None\n        return len(input_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    edge_offset: '1'
    maxoutbuf: '0'
    minoutbuf: '0'
    preamble_bits: '1'
  states:
    _io_cache: ('KeyFob Decoder', 'blk', [('preamble_bits', '1'), ('edge_offset',
      '1')], [('0', 'float', 1), ('1', 'float', 1)], [], 'Embedded Python Block example
      - a simple multiply const', ['edge_offset', 'preamble_bits'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1312, 56.0]
    rotation: 0
    state: enabled
- name: interp_fir_filter_xxx_0
  id: interp_fir_filter_xxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    interp: '1'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_delay: '0'
    taps: '[-0.00016243761638179421,-0.00016558055358473212,-0.0001686043688096106,-0.00017150805797427893,-0.0001742900349199772,-0.00017694786947686225,-0.00017947843298316002,-0.0001818778837332502,-0.00018414149235468358,-0.0001862638018792495,-0.0001882385549833998,-0.0001900586939882487,-0.00019171628809999675,-0.00019320272258482873,-0.00019450850959401578,-0.00019562343368306756,-0.00019653643539641052,-0.00019723584409803152,-0.00019770914514083415,-0.00019794327090494335,-0.00019792435341514647,-0.00019763804448302835,-0.00019706934108398855,-0.0001962027745321393,-0.00019502232316881418,-0.0001935116306412965,-0.00019165391859132797,-0.00018943210307043046,-0.00018682889640331268,-0.00018382679263595492,-0.0001804082130547613,-0.00017655554984230548,-0.0001722512097330764,-0.00016747775953263044,-0.00016221796977333724,-0.00015645487292204052,-0.0001501719088992104,-0.00014335296873468906,-0.00013598246732726693,-0.00012804550351575017,-0.00011952789645874873,-0.00011041626567021012,-0.0001006981692626141,-9.036214032676071e-05,-7.939784700283781e-05,-6.779612158425152e-05,-5.554909148486331e-05,-4.265023744665086e-05,-2.909450813604053e-05,-1.4878390174999367e-05,1.4229635233519693e-19,1.554083610244561e-05,3.174250741722062e-05,4.860152330365963e-05,6.611246499232948e-05,8.426790736848488e-05,0.00010305832984158769,0.0001224720908794552,0.00014249533705879003,0.0001631119812373072,0.0001843036152422428,0.00020604950259439647,0.0002283265203004703,0.00025110915885306895,0.00027436940581537783,0.00029807683313265443,0.0003221985243726522,0.0003466990601737052,0.00037154057645238936,0.00039668273529969156,0.00042208266677334905,0.0004476950562093407,0.0004734722606372088,0.0004993641632609069,0.0005253182607702911,0.0005512798670679331,0.0005771919386461377,0.0006029954529367387,0.0006286289426498115,0.0006540293106809258,0.0006791310734115541,0.0007038672920316458,0.0007281691650860012,0.0007519660866819322,0.0007751862285658717,0.0007977559580467641,0.0008196007693186402,0.0008406448177993298,0.0008608114439994097,0.0008800228242762387,0.0008982007275335491,0.0009152663988061249,0.000931140617467463,0.0009457439882680774,0.0009589973487891257,0.0009708214201964438,0.0009811373893171549,0.000989867141470313,0.0009969334350898862,0.0010022593196481466,0.0010057700565084815,0.0010073913726955652,0.0010070513235405087,0.0010046788956969976,0.001000206102617085,0.0009935664711520076,0.0009846960892900825,0.0009735338971950114,0.00096002162899822,0.0009441041038371623,0.0009257293422706425,0.0009048490319401026,0.0008814185275696218,0.0008553969673812389,0.0008267477969639003,0.0007954387692734599,0.000761442061048001,0.000724734622053802,0.0006852982915006578,0.000643119914457202,0.000598191749304533,0.0005505112349055707,0.0005000816308893263,0.0004469116684049368,0.0003910161030944437,0.00033241568598896265,0.0002711371926125139,0.00020721375767607242,0.0001406847295584157,7.159602682804689e-05,-4.542498005998868e-19,-7.404436473734677e-05,-0.00015047141641844064,-0.00022920880292076617,-0.0003101773909293115,-0.0003932913823518902,-0.0004784580087289214,-0.0005655778222717345,-0.000654544506687671,-0.0007452451973222196,-0.0008375601028092206,-0.000931362621486187,-0.0010265200398862362,-0.0011228928342461586,-0.0012203347869217396,-0.001318693975917995,-0.001417811494320631,-0.0015175234293565154,-0.0016176586505025625,-0.0017180412542074919,-0.0018184896325692534,-0.0019188161240890622,-0.002018829109147191,-0.002118330681696534,-0.002217118861153722,-0.002314987126737833,-0.0024117249995470047,-0.0025071173440665007,-0.0026009457651525736,-0.002692988608032465,-0.002783020492643118,-0.002870814176276326,-0.0029561391565948725,-0.003038763301447034,-0.003118452150374651,-0.0031949705444276333,-0.0032680814620107412,-0.003337548114359379,-0.003403132315725088,-0.003464596578851342,-0.0035217038821429014,-0.0035742181353271008,-0.0036219037137925625,-0.0036645270884037018,-0.0037018575239926577,-0.0037336654495447874,-0.0037597252521663904,-0.0037798138801008463,-0.0037937117740511894,-0.0038012047298252583,-0.003802082035690546,-0.0037961374036967754,-0.003783171297982335,-0.0037629888392984867,-0.0037354021333158016,-0.003700228873640299,-0.003657294437289238,-0.0036064311861991882,-0.0035474796313792467,-0.00348028726875782,-0.003404711140319705,-0.0033206166699528694,-0.0032278785947710276,-0.003126380732282996,-0.003016016911715269,-0.0028966909740120173,-0.0027683174703270197,-0.0026308209635317326,-0.0024841378908604383,-0.0023282149340957403,-0.002163011347874999,-0.0019884968642145395,-0.001804653787985444,-0.001611476531252265,-0.001408971264027059,-0.001197157078422606,-0.0009760655811987817,-0.0007457407773472369,-0.0005062395357526839,-0.0002576317056082189,8.1740881778420905e-19,0.0002665599749889225,0.0005419395165517926,0.0008260168833658099,0.0011186576448380947,0.0014197139535099268,0.0017290255054831505,0.0020464190747588873,0.0023717086296528578,0.002704695798456669,0.003045169170945883,0.003392905695363879,0.003747669979929924,0.004109214525669813,0.004477281589061022,0.004851599223911762,0.005231886636465788,0.0056178513914346695,0.00600919034332037,0.0064055901020765305,0.006806728430092335,0.00721227191388607,0.007621878292411566,0.008035196922719479,0.008451870642602444,0.008871530182659626,0.009293802082538605,0.009718302637338638,0.010144648142158985,0.010572440922260284,0.011001280508935452,0.011430763639509678,0.011860480532050133,0.012290016748011112,0.012718955054879189,0.01314687542617321,0.013573355972766876,0.013997972011566162,0.014420296996831894,0.014839903451502323,0.015256367623806,0.015669258311390877,0.016078155487775803,0.016482634469866753,0.016882270574569702,0.017276648432016373,0.017665350809693336,0.018047966063022614,0.01842408813536167,0.018793314695358276,0.019155248999595642,0.01950949989259243,0.019855687394738197,0.02019342966377735,0.02052236534655094,0.02084212936460972,0.021152373403310776,0.021452754735946655,0.021742939949035645,0.022022608667612076,0.022291451692581177,0.02254916913807392,0.02279547043144703,0.023030081763863564,0.023252742365002632,0.02346320077776909,0.023661216720938683,0.023846570402383804,0.02401905134320259,0.024178465828299522,0.024324631318449974,0.024457382038235664,0.024576568976044655,0.024682054296135902,0.024773718789219856,0.024851461872458458,0.024915188550949097,0.02496482990682125,0.025000328198075294,0.025021642446517944,0.02502875030040741,0.025021642446517944,0.025000328198075294,0.02496482990682125,0.024915188550949097,0.024851461872458458,0.024773718789219856,0.024682054296135902,0.024576568976044655,0.024457382038235664,0.024324631318449974,0.024178465828299522,0.02401905134320259,0.023846570402383804,0.023661216720938683,0.02346320077776909,0.023252742365002632,0.023030081763863564,0.02279547043144703,0.02254916913807392,0.022291451692581177,0.022022608667612076,0.021742939949035645,0.021452754735946655,0.021152373403310776,0.02084212936460972,0.02052236534655094,0.02019342966377735,0.019855687394738197,0.01950949989259243,0.019155248999595642,0.018793314695358276,0.01842408813536167,0.018047966063022614,0.017665350809693336,0.017276648432016373,0.016882270574569702,0.016482634469866753,0.016078155487775803,0.015669258311390877,0.015256367623806,0.014839903451502323,0.014420296996831894,0.013997972011566162,0.013573355972766876,0.01314687542617321,0.012718955054879189,0.012290016748011112,0.011860480532050133,0.011430763639509678,0.011001280508935452,0.010572440922260284,0.010144648142158985,0.009718302637338638,0.009293802082538605,0.008871530182659626,0.008451870642602444,0.008035196922719479,0.007621878292411566,0.00721227191388607,0.006806728430092335,0.0064055901020765305,0.00600919034332037,0.0056178513914346695,0.005231886636465788,0.004851599223911762,0.004477281589061022,0.004109214525669813,0.003747669979929924,0.003392905695363879,0.003045169170945883,0.002704695798456669,0.0023717086296528578,0.0020464190747588873,0.0017290255054831505,0.0014197139535099268,0.0011186576448380947,0.0008260168833658099,0.0005419395165517926,0.0002665599749889225,8.1740881778420905e-19,-0.0002576317056082189,-0.0005062395357526839,-0.0007457407773472369,-0.0009760655811987817,-0.001197157078422606,-0.001408971264027059,-0.001611476531252265,-0.001804653787985444,-0.0019884968642145395,-0.002163011347874999,-0.0023282149340957403,-0.0024841378908604383,-0.0026308209635317326,-0.0027683174703270197,-0.0028966909740120173,-0.003016016911715269,-0.003126380732282996,-0.0032278785947710276,-0.0033206166699528694,-0.003404711140319705,-0.00348028726875782,-0.0035474796313792467,-0.0036064311861991882,-0.003657294437289238,-0.003700228873640299,-0.0037354021333158016,-0.0037629888392984867,-0.003783171297982335,-0.0037961374036967754,-0.003802082035690546,-0.0038012047298252583,-0.0037937117740511894,-0.0037798138801008463,-0.0037597252521663904,-0.0037336654495447874,-0.0037018575239926577,-0.0036645270884037018,-0.0036219037137925625,-0.0035742181353271008,-0.0035217038821429014,-0.003464596578851342,-0.003403132315725088,-0.003337548114359379,-0.0032680814620107412,-0.0031949705444276333,-0.003118452150374651,-0.003038763301447034,-0.0029561391565948725,-0.002870814176276326,-0.002783020492643118,-0.002692988608032465,-0.0026009457651525736,-0.0025071173440665007,-0.0024117249995470047,-0.002314987126737833,-0.002217118861153722,-0.002118330681696534,-0.002018829109147191,-0.0019188161240890622,-0.0018184896325692534,-0.0017180412542074919,-0.0016176586505025625,-0.0015175234293565154,-0.001417811494320631,-0.001318693975917995,-0.0012203347869217396,-0.0011228928342461586,-0.0010265200398862362,-0.000931362621486187,-0.0008375601028092206,-0.0007452451973222196,-0.000654544506687671,-0.0005655778222717345,-0.0004784580087289214,-0.0003932913823518902,-0.0003101773909293115,-0.00022920880292076617,-0.00015047141641844064,-7.404436473734677e-05,-4.542498005998868e-19,7.159602682804689e-05,0.0001406847295584157,0.00020721375767607242,0.0002711371926125139,0.00033241568598896265,0.0003910161030944437,0.0004469116684049368,0.0005000816308893263,0.0005505112349055707,0.000598191749304533,0.000643119914457202,0.0006852982915006578,0.000724734622053802,0.000761442061048001,0.0007954387692734599,0.0008267477969639003,0.0008553969673812389,0.0008814185275696218,0.0009048490319401026,0.0009257293422706425,0.0009441041038371623,0.00096002162899822,0.0009735338971950114,0.0009846960892900825,0.0009935664711520076,0.001000206102617085,0.0010046788956969976,0.0010070513235405087,0.0010073913726955652,0.0010057700565084815,0.0010022593196481466,0.0009969334350898862,0.000989867141470313,0.0009811373893171549,0.0009708214201964438,0.0009589973487891257,0.0009457439882680774,0.000931140617467463,0.0009152663988061249,0.0008982007275335491,0.0008800228242762387,0.0008608114439994097,0.0008406448177993298,0.0008196007693186402,0.0007977559580467641,0.0007751862285658717,0.0007519660866819322,0.0007281691650860012,0.0007038672920316458,0.0006791310734115541,0.0006540293106809258,0.0006286289426498115,0.0006029954529367387,0.0005771919386461377,0.0005512798670679331,0.0005253182607702911,0.0004993641632609069,0.0004734722606372088,0.0004476950562093407,0.00042208266677334905,0.00039668273529969156,0.00037154057645238936,0.0003466990601737052,0.0003221985243726522,0.00029807683313265443,0.00027436940581537783,0.00025110915885306895,0.0002283265203004703,0.00020604950259439647,0.0001843036152422428,0.0001631119812373072,0.00014249533705879003,0.0001224720908794552,0.00010305832984158769,8.426790736848488e-05,6.611246499232948e-05,4.860152330365963e-05,3.174250741722062e-05,1.554083610244561e-05,1.4229635233519693e-19,-1.4878390174999367e-05,-2.909450813604053e-05,-4.265023744665086e-05,-5.554909148486331e-05,-6.779612158425152e-05,-7.939784700283781e-05,-9.036214032676071e-05,-0.0001006981692626141,-0.00011041626567021012,-0.00011952789645874873,-0.00012804550351575017,-0.00013598246732726693,-0.00014335296873468906,-0.0001501719088992104,-0.00015645487292204052,-0.00016221796977333724,-0.00016747775953263044,-0.0001722512097330764,-0.00017655554984230548,-0.0001804082130547613,-0.00018382679263595492,-0.00018682889640331268,-0.00018943210307043046,-0.00019165391859132797,-0.0001935116306412965,-0.00019502232316881418,-0.0001962027745321393,-0.00019706934108398855,-0.00019763804448302835,-0.00019792435341514647,-0.00019794327090494335,-0.00019770914514083415,-0.00019723584409803152,-0.00019653643539641052,-0.00019562343368306756,-0.00019450850959401578,-0.00019320272258482873,-0.00019171628809999675,-0.0001900586939882487,-0.0001882385549833998,-0.0001862638018792495,-0.00018414149235468358,-0.0001818778837332502,-0.00017947843298316002,-0.00017694786947686225,-0.0001742900349199772,-0.00017150805797427893,-0.0001686043688096106,-0.00016558055358473212,-0.00016243761638179421]'
    type: fff
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [576, 244.0]
    rotation: 0
    state: enabled
- name: interp_fir_filter_xxx_0_0
  id: interp_fir_filter_xxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    interp: '1'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_delay: '0'
    taps: '[-0.00016243761638179421,-0.00016558055358473212,-0.0001686043688096106,-0.00017150805797427893,-0.0001742900349199772,-0.00017694786947686225,-0.00017947843298316002,-0.0001818778837332502,-0.00018414149235468358,-0.0001862638018792495,-0.0001882385549833998,-0.0001900586939882487,-0.00019171628809999675,-0.00019320272258482873,-0.00019450850959401578,-0.00019562343368306756,-0.00019653643539641052,-0.00019723584409803152,-0.00019770914514083415,-0.00019794327090494335,-0.00019792435341514647,-0.00019763804448302835,-0.00019706934108398855,-0.0001962027745321393,-0.00019502232316881418,-0.0001935116306412965,-0.00019165391859132797,-0.00018943210307043046,-0.00018682889640331268,-0.00018382679263595492,-0.0001804082130547613,-0.00017655554984230548,-0.0001722512097330764,-0.00016747775953263044,-0.00016221796977333724,-0.00015645487292204052,-0.0001501719088992104,-0.00014335296873468906,-0.00013598246732726693,-0.00012804550351575017,-0.00011952789645874873,-0.00011041626567021012,-0.0001006981692626141,-9.036214032676071e-05,-7.939784700283781e-05,-6.779612158425152e-05,-5.554909148486331e-05,-4.265023744665086e-05,-2.909450813604053e-05,-1.4878390174999367e-05,1.4229635233519693e-19,1.554083610244561e-05,3.174250741722062e-05,4.860152330365963e-05,6.611246499232948e-05,8.426790736848488e-05,0.00010305832984158769,0.0001224720908794552,0.00014249533705879003,0.0001631119812373072,0.0001843036152422428,0.00020604950259439647,0.0002283265203004703,0.00025110915885306895,0.00027436940581537783,0.00029807683313265443,0.0003221985243726522,0.0003466990601737052,0.00037154057645238936,0.00039668273529969156,0.00042208266677334905,0.0004476950562093407,0.0004734722606372088,0.0004993641632609069,0.0005253182607702911,0.0005512798670679331,0.0005771919386461377,0.0006029954529367387,0.0006286289426498115,0.0006540293106809258,0.0006791310734115541,0.0007038672920316458,0.0007281691650860012,0.0007519660866819322,0.0007751862285658717,0.0007977559580467641,0.0008196007693186402,0.0008406448177993298,0.0008608114439994097,0.0008800228242762387,0.0008982007275335491,0.0009152663988061249,0.000931140617467463,0.0009457439882680774,0.0009589973487891257,0.0009708214201964438,0.0009811373893171549,0.000989867141470313,0.0009969334350898862,0.0010022593196481466,0.0010057700565084815,0.0010073913726955652,0.0010070513235405087,0.0010046788956969976,0.001000206102617085,0.0009935664711520076,0.0009846960892900825,0.0009735338971950114,0.00096002162899822,0.0009441041038371623,0.0009257293422706425,0.0009048490319401026,0.0008814185275696218,0.0008553969673812389,0.0008267477969639003,0.0007954387692734599,0.000761442061048001,0.000724734622053802,0.0006852982915006578,0.000643119914457202,0.000598191749304533,0.0005505112349055707,0.0005000816308893263,0.0004469116684049368,0.0003910161030944437,0.00033241568598896265,0.0002711371926125139,0.00020721375767607242,0.0001406847295584157,7.159602682804689e-05,-4.542498005998868e-19,-7.404436473734677e-05,-0.00015047141641844064,-0.00022920880292076617,-0.0003101773909293115,-0.0003932913823518902,-0.0004784580087289214,-0.0005655778222717345,-0.000654544506687671,-0.0007452451973222196,-0.0008375601028092206,-0.000931362621486187,-0.0010265200398862362,-0.0011228928342461586,-0.0012203347869217396,-0.001318693975917995,-0.001417811494320631,-0.0015175234293565154,-0.0016176586505025625,-0.0017180412542074919,-0.0018184896325692534,-0.0019188161240890622,-0.002018829109147191,-0.002118330681696534,-0.002217118861153722,-0.002314987126737833,-0.0024117249995470047,-0.0025071173440665007,-0.0026009457651525736,-0.002692988608032465,-0.002783020492643118,-0.002870814176276326,-0.0029561391565948725,-0.003038763301447034,-0.003118452150374651,-0.0031949705444276333,-0.0032680814620107412,-0.003337548114359379,-0.003403132315725088,-0.003464596578851342,-0.0035217038821429014,-0.0035742181353271008,-0.0036219037137925625,-0.0036645270884037018,-0.0037018575239926577,-0.0037336654495447874,-0.0037597252521663904,-0.0037798138801008463,-0.0037937117740511894,-0.0038012047298252583,-0.003802082035690546,-0.0037961374036967754,-0.003783171297982335,-0.0037629888392984867,-0.0037354021333158016,-0.003700228873640299,-0.003657294437289238,-0.0036064311861991882,-0.0035474796313792467,-0.00348028726875782,-0.003404711140319705,-0.0033206166699528694,-0.0032278785947710276,-0.003126380732282996,-0.003016016911715269,-0.0028966909740120173,-0.0027683174703270197,-0.0026308209635317326,-0.0024841378908604383,-0.0023282149340957403,-0.002163011347874999,-0.0019884968642145395,-0.001804653787985444,-0.001611476531252265,-0.001408971264027059,-0.001197157078422606,-0.0009760655811987817,-0.0007457407773472369,-0.0005062395357526839,-0.0002576317056082189,8.1740881778420905e-19,0.0002665599749889225,0.0005419395165517926,0.0008260168833658099,0.0011186576448380947,0.0014197139535099268,0.0017290255054831505,0.0020464190747588873,0.0023717086296528578,0.002704695798456669,0.003045169170945883,0.003392905695363879,0.003747669979929924,0.004109214525669813,0.004477281589061022,0.004851599223911762,0.005231886636465788,0.0056178513914346695,0.00600919034332037,0.0064055901020765305,0.006806728430092335,0.00721227191388607,0.007621878292411566,0.008035196922719479,0.008451870642602444,0.008871530182659626,0.009293802082538605,0.009718302637338638,0.010144648142158985,0.010572440922260284,0.011001280508935452,0.011430763639509678,0.011860480532050133,0.012290016748011112,0.012718955054879189,0.01314687542617321,0.013573355972766876,0.013997972011566162,0.014420296996831894,0.014839903451502323,0.015256367623806,0.015669258311390877,0.016078155487775803,0.016482634469866753,0.016882270574569702,0.017276648432016373,0.017665350809693336,0.018047966063022614,0.01842408813536167,0.018793314695358276,0.019155248999595642,0.01950949989259243,0.019855687394738197,0.02019342966377735,0.02052236534655094,0.02084212936460972,0.021152373403310776,0.021452754735946655,0.021742939949035645,0.022022608667612076,0.022291451692581177,0.02254916913807392,0.02279547043144703,0.023030081763863564,0.023252742365002632,0.02346320077776909,0.023661216720938683,0.023846570402383804,0.02401905134320259,0.024178465828299522,0.024324631318449974,0.024457382038235664,0.024576568976044655,0.024682054296135902,0.024773718789219856,0.024851461872458458,0.024915188550949097,0.02496482990682125,0.025000328198075294,0.025021642446517944,0.02502875030040741,0.025021642446517944,0.025000328198075294,0.02496482990682125,0.024915188550949097,0.024851461872458458,0.024773718789219856,0.024682054296135902,0.024576568976044655,0.024457382038235664,0.024324631318449974,0.024178465828299522,0.02401905134320259,0.023846570402383804,0.023661216720938683,0.02346320077776909,0.023252742365002632,0.023030081763863564,0.02279547043144703,0.02254916913807392,0.022291451692581177,0.022022608667612076,0.021742939949035645,0.021452754735946655,0.021152373403310776,0.02084212936460972,0.02052236534655094,0.02019342966377735,0.019855687394738197,0.01950949989259243,0.019155248999595642,0.018793314695358276,0.01842408813536167,0.018047966063022614,0.017665350809693336,0.017276648432016373,0.016882270574569702,0.016482634469866753,0.016078155487775803,0.015669258311390877,0.015256367623806,0.014839903451502323,0.014420296996831894,0.013997972011566162,0.013573355972766876,0.01314687542617321,0.012718955054879189,0.012290016748011112,0.011860480532050133,0.011430763639509678,0.011001280508935452,0.010572440922260284,0.010144648142158985,0.009718302637338638,0.009293802082538605,0.008871530182659626,0.008451870642602444,0.008035196922719479,0.007621878292411566,0.00721227191388607,0.006806728430092335,0.0064055901020765305,0.00600919034332037,0.0056178513914346695,0.005231886636465788,0.004851599223911762,0.004477281589061022,0.004109214525669813,0.003747669979929924,0.003392905695363879,0.003045169170945883,0.002704695798456669,0.0023717086296528578,0.0020464190747588873,0.0017290255054831505,0.0014197139535099268,0.0011186576448380947,0.0008260168833658099,0.0005419395165517926,0.0002665599749889225,8.1740881778420905e-19,-0.0002576317056082189,-0.0005062395357526839,-0.0007457407773472369,-0.0009760655811987817,-0.001197157078422606,-0.001408971264027059,-0.001611476531252265,-0.001804653787985444,-0.0019884968642145395,-0.002163011347874999,-0.0023282149340957403,-0.0024841378908604383,-0.0026308209635317326,-0.0027683174703270197,-0.0028966909740120173,-0.003016016911715269,-0.003126380732282996,-0.0032278785947710276,-0.0033206166699528694,-0.003404711140319705,-0.00348028726875782,-0.0035474796313792467,-0.0036064311861991882,-0.003657294437289238,-0.003700228873640299,-0.0037354021333158016,-0.0037629888392984867,-0.003783171297982335,-0.0037961374036967754,-0.003802082035690546,-0.0038012047298252583,-0.0037937117740511894,-0.0037798138801008463,-0.0037597252521663904,-0.0037336654495447874,-0.0037018575239926577,-0.0036645270884037018,-0.0036219037137925625,-0.0035742181353271008,-0.0035217038821429014,-0.003464596578851342,-0.003403132315725088,-0.003337548114359379,-0.0032680814620107412,-0.0031949705444276333,-0.003118452150374651,-0.003038763301447034,-0.0029561391565948725,-0.002870814176276326,-0.002783020492643118,-0.002692988608032465,-0.0026009457651525736,-0.0025071173440665007,-0.0024117249995470047,-0.002314987126737833,-0.002217118861153722,-0.002118330681696534,-0.002018829109147191,-0.0019188161240890622,-0.0018184896325692534,-0.0017180412542074919,-0.0016176586505025625,-0.0015175234293565154,-0.001417811494320631,-0.001318693975917995,-0.0012203347869217396,-0.0011228928342461586,-0.0010265200398862362,-0.000931362621486187,-0.0008375601028092206,-0.0007452451973222196,-0.000654544506687671,-0.0005655778222717345,-0.0004784580087289214,-0.0003932913823518902,-0.0003101773909293115,-0.00022920880292076617,-0.00015047141641844064,-7.404436473734677e-05,-4.542498005998868e-19,7.159602682804689e-05,0.0001406847295584157,0.00020721375767607242,0.0002711371926125139,0.00033241568598896265,0.0003910161030944437,0.0004469116684049368,0.0005000816308893263,0.0005505112349055707,0.000598191749304533,0.000643119914457202,0.0006852982915006578,0.000724734622053802,0.000761442061048001,0.0007954387692734599,0.0008267477969639003,0.0008553969673812389,0.0008814185275696218,0.0009048490319401026,0.0009257293422706425,0.0009441041038371623,0.00096002162899822,0.0009735338971950114,0.0009846960892900825,0.0009935664711520076,0.001000206102617085,0.0010046788956969976,0.0010070513235405087,0.0010073913726955652,0.0010057700565084815,0.0010022593196481466,0.0009969334350898862,0.000989867141470313,0.0009811373893171549,0.0009708214201964438,0.0009589973487891257,0.0009457439882680774,0.000931140617467463,0.0009152663988061249,0.0008982007275335491,0.0008800228242762387,0.0008608114439994097,0.0008406448177993298,0.0008196007693186402,0.0007977559580467641,0.0007751862285658717,0.0007519660866819322,0.0007281691650860012,0.0007038672920316458,0.0006791310734115541,0.0006540293106809258,0.0006286289426498115,0.0006029954529367387,0.0005771919386461377,0.0005512798670679331,0.0005253182607702911,0.0004993641632609069,0.0004734722606372088,0.0004476950562093407,0.00042208266677334905,0.00039668273529969156,0.00037154057645238936,0.0003466990601737052,0.0003221985243726522,0.00029807683313265443,0.00027436940581537783,0.00025110915885306895,0.0002283265203004703,0.00020604950259439647,0.0001843036152422428,0.0001631119812373072,0.00014249533705879003,0.0001224720908794552,0.00010305832984158769,8.426790736848488e-05,6.611246499232948e-05,4.860152330365963e-05,3.174250741722062e-05,1.554083610244561e-05,1.4229635233519693e-19,-1.4878390174999367e-05,-2.909450813604053e-05,-4.265023744665086e-05,-5.554909148486331e-05,-6.779612158425152e-05,-7.939784700283781e-05,-9.036214032676071e-05,-0.0001006981692626141,-0.00011041626567021012,-0.00011952789645874873,-0.00012804550351575017,-0.00013598246732726693,-0.00014335296873468906,-0.0001501719088992104,-0.00015645487292204052,-0.00016221796977333724,-0.00016747775953263044,-0.0001722512097330764,-0.00017655554984230548,-0.0001804082130547613,-0.00018382679263595492,-0.00018682889640331268,-0.00018943210307043046,-0.00019165391859132797,-0.0001935116306412965,-0.00019502232316881418,-0.0001962027745321393,-0.00019706934108398855,-0.00019763804448302835,-0.00019792435341514647,-0.00019794327090494335,-0.00019770914514083415,-0.00019723584409803152,-0.00019653643539641052,-0.00019562343368306756,-0.00019450850959401578,-0.00019320272258482873,-0.00019171628809999675,-0.0001900586939882487,-0.0001882385549833998,-0.0001862638018792495,-0.00018414149235468358,-0.0001818778837332502,-0.00017947843298316002,-0.00017694786947686225,-0.0001742900349199772,-0.00017150805797427893,-0.0001686043688096106,-0.00016558055358473212,-0.00016243761638179421]'
    type: fff
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [576, 348.0]
    rotation: 0
    state: enabled
- name: osmosdr_source_0
  id: osmosdr_source
  parameters:
    affinity: ''
    alias: ''
    ant0: ''
    ant1: ''
    ant10: ''
    ant11: ''
    ant12: ''
    ant13: ''
    ant14: ''
    ant15: ''
    ant16: ''
    ant17: ''
    ant18: ''
    ant19: ''
    ant2: ''
    ant20: ''
    ant21: ''
    ant22: ''
    ant23: ''
    ant24: ''
    ant25: ''
    ant26: ''
    ant27: ''
    ant28: ''
    ant29: ''
    ant3: ''
    ant30: ''
    ant31: ''
    ant4: ''
    ant5: ''
    ant6: ''
    ant7: ''
    ant8: ''
    ant9: ''
    args: '""'
    bb_gain0: '20'
    bb_gain1: '20'
    bb_gain10: '20'
    bb_gain11: '20'
    bb_gain12: '20'
    bb_gain13: '20'
    bb_gain14: '20'
    bb_gain15: '20'
    bb_gain16: '20'
    bb_gain17: '20'
    bb_gain18: '20'
    bb_gain19: '20'
    bb_gain2: '20'
    bb_gain20: '20'
    bb_gain21: '20'
    bb_gain22: '20'
    bb_gain23: '20'
    bb_gain24: '20'
    bb_gain25: '20'
    bb_gain26: '20'
    bb_gain27: '20'
    bb_gain28: '20'
    bb_gain29: '20'
    bb_gain3: '20'
    bb_gain30: '20'
    bb_gain31: '20'
    bb_gain4: '20'
    bb_gain5: '20'
    bb_gain6: '20'
    bb_gain7: '20'
    bb_gain8: '20'
    bb_gain9: '20'
    bw0: 1e5
    bw1: '0'
    bw10: '0'
    bw11: '0'
    bw12: '0'
    bw13: '0'
    bw14: '0'
    bw15: '0'
    bw16: '0'
    bw17: '0'
    bw18: '0'
    bw19: '0'
    bw2: '0'
    bw20: '0'
    bw21: '0'
    bw22: '0'
    bw23: '0'
    bw24: '0'
    bw25: '0'
    bw26: '0'
    bw27: '0'
    bw28: '0'
    bw29: '0'
    bw3: '0'
    bw30: '0'
    bw31: '0'
    bw4: '0'
    bw5: '0'
    bw6: '0'
    bw7: '0'
    bw8: '0'
    bw9: '0'
    clock_source0: ''
    clock_source1: ''
    clock_source2: ''
    clock_source3: ''
    clock_source4: ''
    clock_source5: ''
    clock_source6: ''
    clock_source7: ''
    comment: ''
    corr0: '0'
    corr1: '0'
    corr10: '0'
    corr11: '0'
    corr12: '0'
    corr13: '0'
    corr14: '0'
    corr15: '0'
    corr16: '0'
    corr17: '0'
    corr18: '0'
    corr19: '0'
    corr2: '0'
    corr20: '0'
    corr21: '0'
    corr22: '0'
    corr23: '0'
    corr24: '0'
    corr25: '0'
    corr26: '0'
    corr27: '0'
    corr28: '0'
    corr29: '0'
    corr3: '0'
    corr30: '0'
    corr31: '0'
    corr4: '0'
    corr5: '0'
    corr6: '0'
    corr7: '0'
    corr8: '0'
    corr9: '0'
    dc_offset_mode0: '0'
    dc_offset_mode1: '0'
    dc_offset_mode10: '0'
    dc_offset_mode11: '0'
    dc_offset_mode12: '0'
    dc_offset_mode13: '0'
    dc_offset_mode14: '0'
    dc_offset_mode15: '0'
    dc_offset_mode16: '0'
    dc_offset_mode17: '0'
    dc_offset_mode18: '0'
    dc_offset_mode19: '0'
    dc_offset_mode2: '0'
    dc_offset_mode20: '0'
    dc_offset_mode21: '0'
    dc_offset_mode22: '0'
    dc_offset_mode23: '0'
    dc_offset_mode24: '0'
    dc_offset_mode25: '0'
    dc_offset_mode26: '0'
    dc_offset_mode27: '0'
    dc_offset_mode28: '0'
    dc_offset_mode29: '0'
    dc_offset_mode3: '0'
    dc_offset_mode30: '0'
    dc_offset_mode31: '0'
    dc_offset_mode4: '0'
    dc_offset_mode5: '0'
    dc_offset_mode6: '0'
    dc_offset_mode7: '0'
    dc_offset_mode8: '0'
    dc_offset_mode9: '0'
    freq0: center_freq
    freq1: 100e6
    freq10: 100e6
    freq11: 100e6
    freq12: 100e6
    freq13: 100e6
    freq14: 100e6
    freq15: 100e6
    freq16: 100e6
    freq17: 100e6
    freq18: 100e6
    freq19: 100e6
    freq2: 100e6
    freq20: 100e6
    freq21: 100e6
    freq22: 100e6
    freq23: 100e6
    freq24: 100e6
    freq25: 100e6
    freq26: 100e6
    freq27: 100e6
    freq28: 100e6
    freq29: 100e6
    freq3: 100e6
    freq30: 100e6
    freq31: 100e6
    freq4: 100e6
    freq5: 100e6
    freq6: 100e6
    freq7: 100e6
    freq8: 100e6
    freq9: 100e6
    gain0: '0'
    gain1: '10'
    gain10: '10'
    gain11: '10'
    gain12: '10'
    gain13: '10'
    gain14: '10'
    gain15: '10'
    gain16: '10'
    gain17: '10'
    gain18: '10'
    gain19: '10'
    gain2: '10'
    gain20: '10'
    gain21: '10'
    gain22: '10'
    gain23: '10'
    gain24: '10'
    gain25: '10'
    gain26: '10'
    gain27: '10'
    gain28: '10'
    gain29: '10'
    gain3: '10'
    gain30: '10'
    gain31: '10'
    gain4: '10'
    gain5: '10'
    gain6: '10'
    gain7: '10'
    gain8: '10'
    gain9: '10'
    gain_mode0: 'False'
    gain_mode1: 'False'
    gain_mode10: 'False'
    gain_mode11: 'False'
    gain_mode12: 'False'
    gain_mode13: 'False'
    gain_mode14: 'False'
    gain_mode15: 'False'
    gain_mode16: 'False'
    gain_mode17: 'False'
    gain_mode18: 'False'
    gain_mode19: 'False'
    gain_mode2: 'False'
    gain_mode20: 'False'
    gain_mode21: 'False'
    gain_mode22: 'False'
    gain_mode23: 'False'
    gain_mode24: 'False'
    gain_mode25: 'False'
    gain_mode26: 'False'
    gain_mode27: 'False'
    gain_mode28: 'False'
    gain_mode29: 'False'
    gain_mode3: 'False'
    gain_mode30: 'False'
    gain_mode31: 'False'
    gain_mode4: 'False'
    gain_mode5: 'False'
    gain_mode6: 'False'
    gain_mode7: 'False'
    gain_mode8: 'False'
    gain_mode9: 'False'
    if_gain0: '20'
    if_gain1: '20'
    if_gain10: '20'
    if_gain11: '20'
    if_gain12: '20'
    if_gain13: '20'
    if_gain14: '20'
    if_gain15: '20'
    if_gain16: '20'
    if_gain17: '20'
    if_gain18: '20'
    if_gain19: '20'
    if_gain2: '20'
    if_gain20: '20'
    if_gain21: '20'
    if_gain22: '20'
    if_gain23: '20'
    if_gain24: '20'
    if_gain25: '20'
    if_gain26: '20'
    if_gain27: '20'
    if_gain28: '20'
    if_gain29: '20'
    if_gain3: '20'
    if_gain30: '20'
    if_gain31: '20'
    if_gain4: '20'
    if_gain5: '20'
    if_gain6: '20'
    if_gain7: '20'
    if_gain8: '20'
    if_gain9: '20'
    iq_balance_mode0: '0'
    iq_balance_mode1: '0'
    iq_balance_mode10: '0'
    iq_balance_mode11: '0'
    iq_balance_mode12: '0'
    iq_balance_mode13: '0'
    iq_balance_mode14: '0'
    iq_balance_mode15: '0'
    iq_balance_mode16: '0'
    iq_balance_mode17: '0'
    iq_balance_mode18: '0'
    iq_balance_mode19: '0'
    iq_balance_mode2: '0'
    iq_balance_mode20: '0'
    iq_balance_mode21: '0'
    iq_balance_mode22: '0'
    iq_balance_mode23: '0'
    iq_balance_mode24: '0'
    iq_balance_mode25: '0'
    iq_balance_mode26: '0'
    iq_balance_mode27: '0'
    iq_balance_mode28: '0'
    iq_balance_mode29: '0'
    iq_balance_mode3: '0'
    iq_balance_mode30: '0'
    iq_balance_mode31: '0'
    iq_balance_mode4: '0'
    iq_balance_mode5: '0'
    iq_balance_mode6: '0'
    iq_balance_mode7: '0'
    iq_balance_mode8: '0'
    iq_balance_mode9: '0'
    maxoutbuf: '0'
    minoutbuf: '0'
    nchan: '1'
    num_mboards: '1'
    sample_rate: samp_rate
    sync: sync
    time_source0: ''
    time_source1: ''
    time_source2: ''
    time_source3: ''
    time_source4: ''
    time_source5: ''
    time_source6: ''
    time_source7: ''
    type: fc32
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [64, 220.0]
    rotation: 0
    state: enabled
- name: qtgui_time_sink_x_0
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: dark blue
    color5: dark red
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'False'
    entags: 'True'
    grid: 'False'
    gui_hint: ''
    label1: Comp2Mag_noTh
    label10: Signal 10
    label2: Demod_noTh
    label3: Comp2Mag_Th
    label4: Demod_Th
    label5: Comp2Mag_Th_and_Demod_th_mult
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '""'
    nconnections: '5'
    size: int(1e6)
    srate: samp_rate
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.1'
    tr_mode: qtgui.TRIG_MODE_NORM
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: float
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '3'
    ymin: '-3'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1296, 336.0]
    rotation: 0
    state: true

connections:
- [analog_quadrature_demod_cf_0, '0', interp_fir_filter_xxx_0_0, '0']
- [blocks_complex_to_mag_0, '0', interp_fir_filter_xxx_0, '0']
- [blocks_file_source_0, '0', analog_quadrature_demod_cf_0, '0']
- [blocks_file_source_0, '0', blocks_complex_to_mag_0, '0']
- [blocks_multiply_xx_0, '0', blocks_file_sink_0, '0']
- [blocks_multiply_xx_0, '0', epy_block_0, '1']
- [blocks_multiply_xx_0, '0', qtgui_time_sink_x_0, '4']
- [blocks_threshold_ff_0, '0', blocks_multiply_xx_0, '0']
- [blocks_threshold_ff_0, '0', epy_block_0, '0']
- [blocks_threshold_ff_0, '0', qtgui_time_sink_x_0, '2']
- [blocks_threshold_ff_0_0, '0', blocks_multiply_xx_0, '1']
- [blocks_threshold_ff_0_0, '0', qtgui_time_sink_x_0, '3']
- [interp_fir_filter_xxx_0, '0', blocks_threshold_ff_0, '0']
- [interp_fir_filter_xxx_0, '0', qtgui_time_sink_x_0, '0']
- [interp_fir_filter_xxx_0_0, '0', blocks_threshold_ff_0_0, '0']
- [interp_fir_filter_xxx_0_0, '0', qtgui_time_sink_x_0, '1']
- [osmosdr_source_0, '0', analog_quadrature_demod_cf_0, '0']
- [osmosdr_source_0, '0', blocks_complex_to_mag_0, '0']

metadata:
  file_format: 1
